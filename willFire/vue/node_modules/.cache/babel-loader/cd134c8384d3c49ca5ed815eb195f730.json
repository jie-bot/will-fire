{"remainingRequest":"D:\\code\\willFire\\vue\\node_modules\\thread-loader\\dist\\cjs.js!D:\\code\\willFire\\vue\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\willFire\\vue\\src\\utils\\live2d.js","dependencies":[{"path":"D:\\code\\willFire\\vue\\src\\utils\\live2d.js","mtime":1723950066005},{"path":"D:\\code\\willFire\\vue\\babel.config.js","mtime":1720174139000},{"path":"D:\\code\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"D:\\code\\willFire\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1723800259150},{"path":"D:\\code\\willFire\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1723800259743}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}