{"remainingRequest":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\src\\components\\admin\\postEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\src\\components\\admin\\postEdit.vue","mtime":1723964853964},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1723800259743},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1723800259896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}