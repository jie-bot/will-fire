{"remainingRequest":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\src\\components\\admin\\resourcePathList.vue?vue&type=template&id=a5bc4e3e&scoped=true&","dependencies":[{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\src\\components\\admin\\resourcePathList.vue","mtime":1723964853964},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1723800260197},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"C:\\Users\\32179\\Desktop\\will-fire\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1723800259896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}