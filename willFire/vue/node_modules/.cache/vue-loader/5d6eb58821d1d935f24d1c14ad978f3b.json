{"remainingRequest":"D:\\code\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\willFire\\vue\\src\\components\\common\\videoPlayer.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\code\\willFire\\vue\\src\\components\\common\\videoPlayer.vue","mtime":1720174139000},{"path":"D:\\code\\willFire\\vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1723800259430},{"path":"D:\\code\\willFire\\vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1723800260168},{"path":"D:\\code\\willFire\\vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1723800259734},{"path":"D:\\code\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"D:\\code\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1723800259896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52aWRlby1wbGF5ZXItYm94IHsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLnZqcy1iaWctcGxheS1idXR0b24gewogIGxlZnQ6IDUwJSAhaW1wb3J0YW50OwogIHRvcDogNTAlICFpbXBvcnRhbnQ7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgIWltcG9ydGFudDsKfQoK"},{"version":3,"sources":["videoPlayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"videoPlayer.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\n  <div>\n    <div>\n      <video-player class=\"video-player-box\"\n                    ref=\"videoPlayer\"\n                    :options=\"playerOptions\"\n                    :playsinline=\"true\"\n\n                    @play=\"onPlayerPlay($event)\"\n                    @pause=\"onPlayerPause($event)\"\n                    @ended=\"onPlayerEnded($event)\"\n\n                    @waiting=\"onPlayerWaiting($event)\"\n                    @playing=\"onPlayerPlaying($event)\"\n                    @loadeddata=\"onPlayerLoadeddata($event)\"\n                    @timeupdate=\"onPlayerTimeupdate($event)\"\n                    @canplay=\"onPlayerCanplay($event)\"\n                    @canplaythrough=\"onPlayerCanplaythrough($event)\"\n\n                    @statechanged=\"playerStateChanged($event)\"\n                    @ready=\"playerReadied($event)\">\n      </video-player>\n    </div>\n  </div>\n</template>\n\n<script>\n\n  import 'video.js/dist/video-js.css'\n  import {videoPlayer} from 'vue-video-player'\n\n  export default {\n    props: {\n      url: {\n        type: Object\n      },\n      cover: {\n        type: String,\n        default: \"\"\n      }\n    },\n    components: {\n      videoPlayer\n    },\n    data() {\n      return {\n        playerOptions: {\n          //是否在页面加载后载入视频\n          preload: 'metadata',\n          aspectRatio: '16:9',\n          //自适应宽高\n          fluid: true,\n          loop: false,\n          muted: false,\n          language: 'zh-CN',\n          autoplay: false,\n          //可选的播放速度\n          playbackRates: [0.5, 1.0, 1.5, 2.0],\n          sources: [{\n            type: '',\n            src: ''\n          }],\n          poster: '',\n          notSupportedMessage: '此视频暂无法播放',\n          controlBar: {\n            //暂停和播放键\n            playToggle: true,\n            //进度条\n            progressControl: true,\n            //全屏按钮\n            fullscreenToggle: true\n          }\n        }\n      }\n    },\n\n    computed: {\n      player() {\n        return this.$refs.videoPlayer.player;\n      }\n    },\n\n    watch: {\n      url: {\n        handler(val) {\n          this.playerOptions.sources[0].src = val.src;\n          this.playerOptions.sources[0].type = val.type;\n          this.playerOptions.poster = this.cover;\n        },\n        immediate: true,\n        deep: true\n      }\n    },\n\n    created() {\n\n    },\n\n    mounted() {\n\n    },\n\n    methods: {\n      //播放回调\n      onPlayerPlay(player) {\n\n      },\n\n      //暂停回调\n      onPlayerPause(player) {\n\n      },\n\n      //视频播完回调\n      onPlayerEnded(player) {\n\n      },\n\n      //当播放由于暂时缺少数据而停止时，将触发该事件\n      onPlayerWaiting(player) {\n\n      },\n\n      //在首次启动播放后以及每当重新启动时都会触发。例如，当播放因缺少数据而暂停或延迟后恢复时，将触发它\n      onPlayerPlaying(player) {\n\n      },\n\n      //当前播放位置的视频帧（通常是第一帧）加载完成后触发\n      onPlayerLoadeddata(player) {\n\n      },\n\n      //当currentTime更新时会触发timeupdate事件\n      onPlayerTimeupdate(player) {\n\n      },\n\n      //在终端可以播放媒体文件时（但估计还没有加载足够的数据来播放媒体直到其结束，即后续可能需要停止以进一步缓冲内容）被触发\n      onPlayerCanplay(player) {\n\n      },\n\n      //在终端可以播放媒体文件时（估计已经加载了足够的数据来播放媒体直到其结束，而不必停止以进一步缓冲内容）被触发\n      onPlayerCanplaythrough(player) {\n\n      },\n\n      //播放状态改变回调\n      playerStateChanged(player) {\n\n      },\n\n      //将侦听器绑定到组件的就绪状态。与事件监听器的不同之处在于，如果ready事件已经发生，它将立即触发该函数\n      playerReadied(player) {\n\n      }\n    }\n  }\n</script>\n\n<style>\n\n  .video-player-box {\n    border-radius: 5px;\n    overflow: hidden;\n  }\n\n  .vjs-big-play-button {\n    left: 50% !important;\n    top: 50% !important;\n    transform: translate(-50%, -50%) !important;\n  }\n\n</style>\n"]}]}