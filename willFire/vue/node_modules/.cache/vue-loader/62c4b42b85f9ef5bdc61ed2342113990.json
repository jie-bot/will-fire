{"remainingRequest":"D:\\code\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\willFire\\vue\\src\\components\\user.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\willFire\\vue\\src\\components\\user.vue","mtime":1723985899512},{"path":"D:\\code\\willFire\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1723800259743},{"path":"D:\\code\\willFire\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1723800259159},{"path":"D:\\code\\willFire\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1723800259896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}